// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RaffleEnter extends ethereum.Event {
  get params(): RaffleEnter__Params {
    return new RaffleEnter__Params(this);
  }
}

export class RaffleEnter__Params {
  _event: RaffleEnter;

  constructor(event: RaffleEnter) {
    this._event = event;
  }

  get palyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RequestedRaffleWinner extends ethereum.Event {
  get params(): RequestedRaffleWinner__Params {
    return new RequestedRaffleWinner__Params(this);
  }
}

export class RequestedRaffleWinner__Params {
  _event: RequestedRaffleWinner;

  constructor(event: RequestedRaffleWinner) {
    this._event = event;
  }

  get requestId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WinnerPicked extends ethereum.Event {
  get params(): WinnerPicked__Params {
    return new WinnerPicked__Params(this);
  }
}

export class WinnerPicked__Params {
  _event: WinnerPicked;

  constructor(event: WinnerPicked) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Raffle__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Raffle extends ethereum.SmartContract {
  static bind(address: Address): Raffle {
    return new Raffle("Raffle", address);
  }

  checkUpkeep(param0: Bytes): Raffle__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Raffle__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Raffle__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Raffle__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getEntranceFee(): BigInt {
    let result = super.call("getEntranceFee", "getEntranceFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEntranceFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEntranceFee",
      "getEntranceFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getInterval(): BigInt {
    let result = super.call("getInterval", "getInterval():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getInterval", "getInterval():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastTimeStamp(): BigInt {
    let result = super.call(
      "getLastTimeStamp",
      "getLastTimeStamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLastTimeStamp",
      "getLastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestTimestamp(): BigInt {
    let result = super.call(
      "getLatestTimestamp",
      "getLatestTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLatestTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestTimestamp",
      "getLatestTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumWords(): BigInt {
    let result = super.call("getNumWords", "getNumWords():(uint32)", []);

    return result[0].toBigInt();
  }

  try_getNumWords(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNumWords", "getNumWords():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNumberOfPlayers(): BigInt {
    let result = super.call(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNumberOfPlayers(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNumberOfPlayers",
      "getNumberOfPlayers():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlayer(index: BigInt): Address {
    let result = super.call("getPlayer", "getPlayer(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_getPlayer(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("getPlayer", "getPlayer(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRaffleState(): i32 {
    let result = super.call("getRaffleState", "getRaffleState():(uint8)", []);

    return result[0].toI32();
  }

  try_getRaffleState(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getRaffleState",
      "getRaffleState():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRecentWinner(): Address {
    let result = super.call(
      "getRecentWinner",
      "getRecentWinner():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getRecentWinner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRecentWinner",
      "getRecentWinner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRequestComfirmations(): BigInt {
    let result = super.call(
      "getRequestComfirmations",
      "getRequestComfirmations():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getRequestComfirmations(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRequestComfirmations",
      "getRequestComfirmations():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vrfCoordinatorV2(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get entranceFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gasLane(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get subscriptionId(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get callbackGasLimit(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get interval(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class EnterRaffleCall extends ethereum.Call {
  get inputs(): EnterRaffleCall__Inputs {
    return new EnterRaffleCall__Inputs(this);
  }

  get outputs(): EnterRaffleCall__Outputs {
    return new EnterRaffleCall__Outputs(this);
  }
}

export class EnterRaffleCall__Inputs {
  _call: EnterRaffleCall;

  constructor(call: EnterRaffleCall) {
    this._call = call;
  }
}

export class EnterRaffleCall__Outputs {
  _call: EnterRaffleCall;

  constructor(call: EnterRaffleCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class RawFulfillRandomWordsCall extends ethereum.Call {
  get inputs(): RawFulfillRandomWordsCall__Inputs {
    return new RawFulfillRandomWordsCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomWordsCall__Outputs {
    return new RawFulfillRandomWordsCall__Outputs(this);
  }
}

export class RawFulfillRandomWordsCall__Inputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }

  get requestId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get randomWords(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RawFulfillRandomWordsCall__Outputs {
  _call: RawFulfillRandomWordsCall;

  constructor(call: RawFulfillRandomWordsCall) {
    this._call = call;
  }
}
